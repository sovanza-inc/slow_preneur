---
description: Use this rule when working in the web application frontend
globs: apps/web/**/*.tsx, apps/web/**/*.ts
---

# Web rules

- Use Next.js 15
- All routes (pages) and layouts in `apps/web/app` are server components
- Prefer using @saas-ui-pro/react and @saas-ui/react over @chakra-ui/react, only if a component is not available in Saas UI, resort to Chakra UI
- Do NOT use Tailwind or CSS unless stated otherwise
- Prefer `function` over anonymous functions for components
- Prefer specific style props over combined ones, eg `borderWidth` instead of `border="1px solid"`
- Use local semantic tokens when applicable [semantic-tokens.ts](mdc:packages/theme/src/foundations/semantic-tokens.ts)
- tRPC with React Query is used for data fetching, available routers can be found in [router.ts](mdc:packages/api/trpc/router.ts) and `packages/api/modules/*`
- tRPC React hooks are imported from `#lib/trpc/react`, eg `import { api } from '#lib/trpc/react'`
- Always use `snake-case` for filenames
- Use named exports instead of default exports, except for Next.js pages and layouts.
- Do not use barrel exports (index.ts) for features
- Page components are named as `name-page.tsx` and live in the features folder, routes import this page file as the entry point. Always add the `'use client'` directive.
- Use absolute imports, for example `'#features/common/components/[component-name]'`

# Project structure

- Shared UI components live in the `apps/web/features/common/components` folder
- Shared React hooks live in the `apps/web/features/common/hooks` folder
- Shared libraries live in the `apps/web/app/lib` folder
- Functionality is grouped by feature in the `apps/web/app/features` folder
- Routes live in the `apps/web/app` folder
- This is a multitenant application, workspace specific routes live under `apps/web/app/(app)/[workspace]`




